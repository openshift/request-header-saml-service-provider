
# Enable DumpIO
# NOTE 0: This should only be used for debuging and not in production use
# NOTE 1: this logs of all input received by Apache and/or all output sent by
#         Apache to be logged (dumped) to the error.log file.
# NOTE 2: This log may contain security sensitive information which
#         should not normally be written to a log file
DumpIOInput  On
DumpIOOutput On

# Enable Mellon Diagnostics
# NOTE 0: This should only be used for debuging and not in production use
# NOTE 1: Diagnostic logging adds overhead to the execution of ``mod_auth_mellon``
# NOTE 2: In addition the diagnostic log file may contain security sensitive information which
#         should not normally be written to a log file.
MellonDiagnosticsEnable On

SSLProxyEngine on
# Need to replace this with the master ca.crt
SSLProxyCACertificateFile /etc/pki/tls/private/localhost.pem
# It's critical to enforce client certificates on the Master.  Otherwise
# requests could spoof the X-Remote-User header by accessing the Master's
# /oauth/authorize endpoint directly.
SSLProxyMachineCertificateFile ${PROXY_MACHINE_CERTIFICATE}

# mod_auth_mellon only accepts its own hostname in the RedirectTo field
# so we redirect the user here, then back to OpenShift Public URL
Redirect /redirect ${OCP_PUBLIC_URL}

# Send all requests to the console
RewriteEngine On
RewriteCond %{REQUEST_URI} ^/mod_auth_basic/?
RewriteCond %{HTTP:X-Csrf-Token} ^$ [NC]		
RewriteRule ^.* - [F,L]


<Location />
    MellonEnable "info"
    MellonEndpointPath /mellon
    MellonSPMetadataFile /etc/httpd/saml2/mellon-metadata.xml
    MellonSPPrivateKeyFile /etc/httpd/saml2/mellon.key
    MellonSPCertFile /etc/httpd/saml2/mellon.crt
    MellonIdPMetadataFile /etc/httpd/saml2/idp-metadata.xml
</Location>

<Location ${PROXY_PATH}>
    AuthType Mellon
    MellonEnable "auth"
    Require valid-user

    # Proxy to backend once authenticated
    ProxyPass ${PROXY_DESTINATION}
    ProxyPassReverse ${PROXY_DESTINATION}

    # Map Mellon attributes to IDP attributes
    # These Directives must execute in the same block
    # (maybe a quirk or bug with mod_auth_mellon?)
    MellonSetEnv user ${REMOTE_USER_SAML_ATTRIBUTE}
    MellonSetEnv name ${REMOTE_USER_NAME_SAML_ATTRIBUTE}
    MellonSetEnv email ${REMOTE_USER_EMAIL_SAML_ATTRIBUTE}
    MellonSetEnv preferred_username ${REMOTE_USER_PREFERRED_USERNAME_SAML_ATTRIBUTE}

    # Require a value in the user attribute we're going to use:
    MellonCond ${REMOTE_USER_SAML_ATTRIBUTE} .+ [REG]

    # Set the RequestHeader Remote-User to obtained values from SAML exchange
    RequestHeader set Remote-User %{MELLON_user}e env=MELLON_user
    RequestHeader set Remote-User-Name %{MELLON_name}e env=MELLON_name
    RequestHeader set Remote-User-Email %{MELLON_email}e env=MELLON_email
    RequestHeader set Remote-User-Preferred-Username %{MELLON_preferred_username}e env=MELLON_preferred_username

</Location>

RequestHeader unset Remote-User
